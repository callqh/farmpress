{"version":3,"file":"dev.js","sourceRoot":"","sources":["../../src/node/dev.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,cAAc,CAAC;AACpD,OAAO,IAAI,MAAM,MAAM,CAAC;AACxB,OAAO,EAAE,aAAa,EAAE,MAAM,KAAK,CAAC;AACpC,OAAO,EAAE,OAAO,EAAE,MAAM,MAAM,CAAC;AAC/B,OAAO,EAAE,GAAG,EAAE,MAAM,SAAS,CAAC;AAC9B,OAAO,EAAE,eAAe,EAAE,MAAM,kBAAkB,CAAC;AACnD,gBAAgB;AAChB,MAAM,UAAU,GAAG,aAAa,CAAC,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;AAClD,eAAe;AACf,MAAM,SAAS,GAAG,OAAO,CAAC,UAAU,CAAC,CAAC;AAGtC,MAAM,CAAC,MAAM,GAAG,GAAG,KAAK,IAAI,EAAE;IAC5B,kBAAkB;IAClB,iBAAiB;IACjB,IAAI,CAAC;QACH,MAAM,KAAK,CAAC;YACV,WAAW,EAAE;gBACX,KAAK,EAAE;oBACL,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,cAAc,CAAC;iBAC3C;aACF;YACD,MAAM,EAAE;gBACN,IAAI,EAAE,IAAI;aACX;YACD,OAAO,EAAE;gBACP,sBAAsB;gBACtB,eAAe,EAAE;aAClB;YACD,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,UAAU,CAAC;SAC/C,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,6BAA6B,KAAK,EAAE,CAAC,CAAC;IACrD,CAAC;AACH,CAAC,CAAA;AAGD,MAAM,CAAC,MAAM,MAAM,GAAG,KAAK,IAAI,EAAE;IAC/B,IAAI,CAAC;QACH,MAAM,KAAK,CAAC;YACV,WAAW,EAAE,EACZ;SACF,CAAC,CAAC;IACL,CAAC;IAAC,OAAO,KAAK,EAAE,CAAC;QACf,MAAM,CAAC,KAAK,CAAC,yBAAyB,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC;QACrD,OAAO,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;IAClB,CAAC;AACH,CAAC,CAAA","sourcesContent":["import { start, logger, build } from \"@farmfe/core\";\nimport path from 'path';\nimport { fileURLToPath } from 'url';\nimport { dirname } from 'path';\nimport { cwd } from \"process\";\nimport { farmfePluginMdx } from \"../mdx/plugin.js\";\n// 模拟 __filename\nconst __filename = fileURLToPath(import.meta.url);\n// 模拟 __dirname\nconst __dirname = dirname(__filename);\n\n\nexport const dev = async () => {\n  // 开发环境下当做spa应用去启动\n  // isSSR 始终为false\n  try {\n    await start({\n      compilation: {\n        input: {\n          index: path.resolve(cwd(), \"./index.html\")\n        },\n      },\n      server: {\n        port: 6532,\n      },\n      plugins: [\n        '@farmfe/plugin-react',\n        farmfePluginMdx()\n      ],\n      publicDir: path.resolve(__dirname, \"./public\"),\n    });\n  } catch (error) {\n    logger.error(`Failed to start server:\\n ${error}`);\n  }\n}\n\n\nexport const _build = async () => {\n  try {\n    await build({\n      compilation: {\n      }\n    });\n  } catch (error) {\n    logger.error(`error during build:\\n ${error.stack}`);\n    process.exit(1);\n  }\n}\n"]}